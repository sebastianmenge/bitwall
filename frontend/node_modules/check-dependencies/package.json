{
  "name": "check-dependencies",
  "version": "0.7.1",
  "description": "Checks if currently installed npm/bower dependencies are installed in the exact same versions that are specified in package.json/bower.json",
  "homepage": "https://github.com/mzgol/check-dependencies",
  "author": {
    "name": "Michał Gołębiowski",
    "email": "m.goleb@gmail.com"
  },
  "keywords": [
    "dependency",
    "packages",
    "modules",
    "dependencies"
  ],
  "main": "lib/check-dependencies.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/mzgol/check-dependencies.git"
  },
  "bugs": {
    "url": "https://github.com/mzgol/check-dependencies/issues"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "files": [
    "lib"
  ],
  "dependencies": {
    "bower-config": "^0.5.2",
    "chalk": "^0.5.1",
    "findup-sync": "^0.1.3",
    "lodash": "^2.4.1",
    "semver": "^2.3.1"
  },
  "devDependencies": {
    "bower": "1.3.7",
    "fs-extra": "0.10.0",
    "grunt": "0.4.5",
    "grunt-cli": "0.1.13",
    "grunt-contrib-clean": "0.5.0",
    "grunt-eslint": "0.6.0",
    "grunt-jscs": "0.6.1",
    "grunt-mocha-test": "0.11.0",
    "jscs-trailing-comma": "0.3.0",
    "load-grunt-tasks": "0.6.0",
    "time-grunt": "0.4.0"
  },
  "scripts": {
    "test": "grunt"
  },
  "engines": {
    "node": ">=0.10.21"
  },
  "readme": "# check-dependencies\n\n> Checks if currently installed npm/bower dependencies are installed in the exact same versions that are specified in package.json/bower.json\n\n[![Build Status](https://travis-ci.org/mzgol/check-dependencies.svg?branch=master)](https://travis-ci.org/mzgol/check-dependencies)\n[![Build status](https://ci.appveyor.com/api/projects/status/a4cok143mjmi0hk3/branch/master)](https://ci.appveyor.com/project/mzgol/check-dependencies)\n\n(Note: the package previously published under this name is now called [dependency-status](https://www.npmjs.org/package/dependency-status))\n\n## Installation\n\nTo install the package and add it to your `package.json`, invoke:\n\n```shell\nnpm install check-dependencies --save-dev\n```\n\n## Rationale\n\nWhen dependencies are changed in `package.json` (or `bower.json`), whether it's a version bump or a new package, one can forget to invoke `npm install` (or `bower install`) and continue using the application, possibly encountering errors caused by obsolete package versions. To avoid it, use the `check-dependencies` module at the top of the entry point of your application; it will inform about not up-to-date setup and optionally install the dependencies.\n \nAnother option would be to always invoke `npm install` (or `bower install`) at the top of the main file but it can be slow and `check-dependencies` is fast.\n\n## Usage\n\nOnce the package has been installed, it may be used via:\n\n```js\nrequire('check-dependencies')(config, callback);\n```\nwhere `callback` is invoked upon completion and `config` is a configuration object.\n\n`callback` is invoked with the object containing fields:\n```js\n{\n    status: number,      // 0 if successful, 1 otherwise\n    depsWereOk: boolean, // true if dependencies were already satisfied\n    output: array,       // array of logged messages\n    error: array,        // array of logged errors\n}\n```\n `log` and `error` - arrays aggregating informational and error\nmessages. The operation was successful if\n\nThe `config` object can have the following fields:\n\n### packageManager\n\nPackage manager to check against. Possible values: `'npm'`, `'bower'`. (Note: for `bower` you need to have the `bower` package installed either globally or locally in the same project in which you use `check-dependencies`).\n\nType: `string`\n\nDefault: `'npm'`\n\n### packageDir\n\nPath to the directory containing `package.json`.\n\nType: `string`\n\nDefault: the closest directory containing `package.json` when going up the tree, starting from the current one\n\n### install\n\nInstalls packages if they don't match.\n\nType: `boolean`\n\nDefault: `false`\n\n### scopeList\n\nThe list of keys in package.json where to look for package names & versions.\n\nType: `array`\n\nDefault: `['dependencies', 'devDependencies']`\n\n### verbose\n\nPrints messages to the console.\n\nType: `boolean`\n\nDefault: `false`\n\n### log\n\nA function logging debug messages (applies only if `verbose: true`).\n\nType: `function`\n\nDefault: `console.log.bind(console)`\n\n### error\n\nA function logging error messages (applies only if `verbose: true`).\n\nType: `function`\n\nDefault: `console.error.bind(console)`\n\n## Usage Examples\n\nThe most basic usage:\n```js\nrequire('check-dependencies')(callback);\n```\nThis will check packages' versions, install mismatched ones and invoke `callback`.\n\nThe following:\n```js\nrequire('check-dependencies')({\n    install: false,\n    verbose: true,\n}, callback);\n```\nwill report an error to `callback` if packages' versions are mismatched.\n\nThe following two examples:\n```js\nrequire('check-dependencies')(callback);\nrequire('check-dependencies')({}, callback);\n```\nbehave in the same way - `callback` is invoked upon completion; if there was an error, it's passed as a parameter to `callback`.\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using `npm test`.\n\n## License\nCopyright (c) 2014 Michał Gołębiowski. Licensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "check-dependencies@0.7.1",
  "_shasum": "722335efd4d64d0c86aabfeb75988afaf856d318",
  "_from": "check-dependencies@^0.7.1",
  "_resolved": "https://registry.npmjs.org/check-dependencies/-/check-dependencies-0.7.1.tgz"
}
