{
  "name": "cookies-js",
  "version": "1.1.0",
  "author": {
    "name": "Scott Hamper"
  },
  "description": "Client-Side Cookie Manipulation API",
  "homepage": "http://github.com/ScottHamper/Cookies",
  "license": "Public Domain",
  "keywords": [
    "cookies",
    "client",
    "browser"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/ScottHamper/Cookies.git"
  },
  "main": "./src/cookies.js",
  "readme": "# Cookies.js\r\n\r\nCookies.js is a small client-side javascript library that makes managing cookies easy.\r\n\r\n[Features](#features)  \r\n[Browser Compatibility](#browser-compatibility)  \r\n[Getting the Library](#getting-the-library)  \r\n[Use in CommonJS/Node Environments Without `window`](#use-in-commonjsnode-environments-without-window)  \r\n[A Note About Encoding](#a-note-about-encoding)  \r\n[API Reference](#api-reference)\r\n\r\n## Features\r\n- [RFC6265](http://www.rfc-editor.org/rfc/rfc6265.txt) compliant\r\n- Cross browser\r\n- Lightweight\r\n- No dependencies\r\n- Public domain\r\n- Supports AMD / CommonJS loaders\r\n\r\n## Browser Compatibility\r\nThe following browsers have passed all of the automated Cookies.js tests:\r\n- Chrome\r\n- Firefox 3+\r\n- Safari 4+\r\n- Opera 10+\r\n- Internet Explorer 6+\r\n\r\n## Getting the Library\r\n#### Direct downloads\r\n- [v1.1.0 Minified](https://raw.github.com/ScottHamper/Cookies/1.1.0/dist/cookies.min.js) (~1 KB gzipped)\r\n- [v1.1.0 Unminified](https://raw.github.com/ScottHamper/Cookies/1.1.0/src/cookies.js) (~1.7 KB gzipped)\r\n\r\n#### Node Package Manager\r\n`npm install cookies-js`\r\n\r\n#### Bower\r\n`bower install cookies-js`\r\n\r\n## Use in CommonJS/Node Environments Without `window`\r\nIn environments where there is no native `window` object, Cookies.js will export a factory method\r\nthat accepts a `window` instance. For example, using [jsdom](https://github.com/tmpvar/jsdom), you\r\nmight do something like:\r\n\r\n```javascript\r\nvar jsdom = require('jsdom');\r\nvar window = jsdom.jsdom().parentWindow;\r\nvar Cookies = require('cookies-js')(window);\r\n\r\n// Use Cookies as you normally would\r\n```\r\n\r\n## A Note About Encoding\r\n[RFC6265](http://www.rfc-editor.org/rfc/rfc6265.txt) defines a strict set of allowed characters for\r\ncookie keys and values. In order to effectively allow any character to be used in a key or value,\r\nCookies.js will URI encode disallowed characters in their UTF-8 representation. As such, Cookies.js\r\nalso expects cookie keys and values to already be URI encoded in a UTF-8 representation when it\r\naccesses cookies. Keep this in mind when working with cookies on the server side.\r\n\r\n#### .NET Users\r\nDo not use [HttpUtility.UrlEncode](http://msdn.microsoft.com/en-us/library/4fkewx0t.aspx) and\r\n[HttpUtility.UrlDecode](http://msdn.microsoft.com/en-us/library/adwtk1fy.aspx) on cookie keys or\r\nvalues. `HttpUtility.UrlEncode` will improperly escape space characters to `'+'` and lower case every\r\nescape sequence. `HttpUtility.UrlDecode` will improperly unescape every `'+'` to a space character.\r\nInstead, use\r\n[System.Uri.EscapeDataString](http://msdn.microsoft.com/en-us/library/system.uri.escapedatastring.aspx)\r\nand [System.Uri.UnescapeDataString](http://msdn.microsoft.com/en-us/library/system.uri.unescapedatastring.aspx).\r\n\r\n\r\n## API Reference\r\n\r\n**Methods**  \r\n[Cookies.set(key, value [, options])](#cookiessetkey-value--options)  \r\n[Cookies.get(key)](#cookiesgetkey)  \r\n[Cookies.expire(key [, options])](#cookiesexpirekey--options)\r\n\r\n**Properties**  \r\n[Cookies.enabled](#cookiesenabled)  \r\n[Cookies.defaults](#cookiesdefaults)\r\n\r\n### Methods\r\n\r\n#### Cookies.set(key, value [, options])\r\n*Alias: Cookies(key, value [, options])*\r\n\r\nSets a cookie in the document. If the cookie does not already exist, it will be created. Returns the `Cookies` object.\r\n\r\n| Option    | Description                                                                                      | Default     |\r\n| --------: | ------------------------------------------------------------------------------------------------ | ----------- |\r\n|    *path* | A string value of the path of the cookie                                                         | `\"/\"`       |\r\n|  *domain* | A string value of the domain of the cookie                                                       | `undefined` |\r\n| *expires* | A number (of seconds), a date parsable string, or a `Date` object of when the cookie will expire | `undefined` |\r\n|  *secure* | A boolean value of whether or not the cookie should only be available over SSL                   | `false`     |\r\n\r\nA default value for any option may be set in the `Cookies.defaults` object.\r\n\r\n**Example Usage**\r\n```javascript\r\n// Setting a cookie value\r\nCookies.set('key', 'value');\r\n\r\n// Chaining sets together\r\nCookies.set('key', 'value').set('hello', 'world');\r\n\r\n// Setting cookies with additional options\r\nCookies.set('key', 'value', { domain: 'www.example.com', secure: true });\r\n\r\n// Setting cookies with expiration values\r\nCookies.set('key', 'value', { expires: 600 }); // Expires in 10 minutes\r\nCookies.set('key', 'value', { expires: '01/01/2012' });\r\nCookies.set('key', 'value', { expires: new Date(2012, 0, 1) });\r\n\r\n// Using the alias\r\nCookies('key', 'value', { secure: true });\r\n```\r\n\r\n#### Cookies.get(key)\r\n*Alias: Cookies(key)*\r\n\r\nReturns the value of the most locally scoped cookie with the specified key.\r\n\r\n**Example Usage**\r\n```javascript\r\n// First set a cookie\r\nCookies.set('key', 'value');\r\n\r\n// Get the cookie value\r\nCookies.get('key'); // \"value\"\r\n\r\n// Using the alias\r\nCookies('key'); // \"value\"\r\n```\r\n    \r\n#### Cookies.expire(key [, options])\r\n*Alias: Cookies(key, `undefined` [, options])*\r\n\r\nExpires a cookie, removing it from the document. Returns the `Cookies` object.\r\n\r\n| Option    | Description                                                                                      | Default     |\r\n| --------: | ------------------------------------------------------------------------------------------------ | ----------- |\r\n|    *path* | A string value of the path of the cookie                                                         | `\"/\"`       |\r\n|  *domain* | A string value of the domain of the cookie                                                       | `undefined` |\r\n\r\nA default value for any option may be set in the `Cookies.defaults` object.\r\n\r\n**Example Usage**\r\n```javascript\r\n// First set a cookie and get its value\r\nCookies.set('key', 'value').get('key'); // \"value\"\r\n\r\n// Expire the cookie and try to get its value\r\nCookies.expire('key').get('key'); // undefined\r\n\r\n// Using the alias\r\nCookies('key', undefined);\r\n```\r\n    \r\n\r\n### Properties\r\n\r\n#### Cookies.enabled\r\nA boolean value of whether or not the browser has cookies enabled.\r\n\r\n**Example Usage**\r\n```javascript\r\nif (Cookies.enabled) {\r\n    Cookies.set('key', 'value');\r\n}\r\n```\r\n\r\n#### Cookies.defaults\r\nAn object representing default options to be used when setting and expiring cookie values.\r\n\r\n| Option    | Description                                                                                      | Default     |\r\n| --------: | ------------------------------------------------------------------------------------------------ | ----------- |\r\n|    *path* | A string value of the path of the cookie                                                         | `\"/\"`       |\r\n|  *domain* | A string value of the domain of the cookie                                                       | `undefined` |\r\n| *expires* | A number (of seconds), a date parsable string, or a `Date` object of when the cookie will expire | `undefined` |\r\n|  *secure* | A boolean value of whether or not the cookie should only be available over SSL                   | `false`     |\r\n\r\n**Example Usage**\r\n```javascript\r\nCookies.defaults = {\r\n    path: '/',\r\n    secure: true\r\n};\r\n\r\nCookies.set('key', 'value'); // Will be secure and have a path of '/'\r\nCookies.expire('key'); // Will expire the cookie with a path of '/'\r\n```\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ScottHamper/Cookies/issues"
  },
  "_id": "cookies-js@1.1.0",
  "_shasum": "d6728cdb7a5468c970b0d58bfcaee255ea090e7e",
  "_from": "cookies-js@^1.1.0",
  "_resolved": "https://registry.npmjs.org/cookies-js/-/cookies-js-1.1.0.tgz"
}
